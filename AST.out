 ==== valid syntax ====
-- Print AST --
   0
     TCONST    258
          m
          7
          n
          85
     TVAR    259
          x
          y
          z
          q
          r
     TPROC    260
          multiply
             0
               TVAR    259
                    a
                    b
               TBEGIN    262
                    ASSIGN    272
                         a
                         x
                    ASSIGN    272
                         b
                         y
                    ASSIGN    272
                         z
                         0
                    TWHILE    265
                         >    62
                              b
                              0
                         TBEGIN    262
                              TIF    263
                                   odd    268
                                        b
                                   ASSIGN    272
                                        z
                                        +    43
                                             z
                                             a
                              ASSIGN    272
                                   a
                                   *    42
                                        2
                                        a
                              ASSIGN    272
                                   b
                                   /    47
                                        b
                                        2
     TBEGIN    262
          ASSIGN    272
               x
               m
          ASSIGN    272
               y
               n
          TCALL    261
               multiply
-- CodeGen --
	JMP	LAB0
multiply
	JMP	LAB1
LAB1
	INT	0	5
	LOD	1	3
	STO	0	3
	LOD	1	4
	STO	0	4
	LIT	0	0
	STO	1	5
LAB2
	LOD	0	4
	LIT	0	0
	GT
	JPC	LAB3
	LOD	0	4
	ODD
	JPC	LAB4
	LOD	1	5
	LOD	0	3
	ADD
	STO	1	5
LAB4
	LIT	0	2
	LOD	0	3
	MUL
	STO	0	3
	LOD	0	4
	LIT	0	2
	DIV
	STO	0	4
	JMP	LAB2
LAB3
	RET
b	1	1	4
a	1	1	3
multiply	2	0	1
r	1	0	7
q	1	0	6
z	1	0	5
y	1	0	4
x	1	0	3
n	0	0	85
m	0	0	7
LAB0
	INT	0	8
	LIT	0	7
	STO	0	3
	LIT	0	85
	STO	0	4
	CAL	0	multiply
	END
multiply	2	0	1
r	1	0	7
q	1	0	6
z	1	0	5
y	1	0	4
x	1	0	3
n	0	0	85
m	0	0	7
===== Binary Code =====
0	6	0	30
1	6	0	2
2	5	0	5
3	2	1	3
4	3	0	3
5	2	1	4
6	3	0	4
7	0	0	0
8	3	1	5
9	2	0	4
10	0	0	0
11	1	0	12
12	7	0	29
13	2	0	4
14	1	0	6
15	7	0	20
16	2	1	5
17	2	0	3
18	1	0	2
19	3	1	5
20	0	0	2
21	2	0	3
22	1	0	4
23	3	0	3
24	2	0	4
25	0	0	2
26	1	0	5
27	3	0	4
28	6	0	9
29	1	0	0
30	5	0	8
31	0	0	7
32	3	0	3
33	0	0	85
34	3	0	4
35	4	0	1
36	1	0	7
37	0	0	0
------------------------------
=== start PL0 ===
=== execution result(global var. contents) ===
stack:	7	0
stack:	6	0
stack:	5	595
stack:	4	85
stack:	3	7
